// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Pyramid.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReservaDePassagemFeature : object, Xunit.IClassFixture<ReservaDePassagemFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt"), "Features", "Reserva de Passagem", "    Como um passageiro\r\n    Eu quero reservar uma passagem\r\n    Para garantir meu" +
                " assento na viagem", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BookTicket.feature"
#line hidden
        
        public ReservaDePassagemFeature(ReservaDePassagemFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "ID",
                        "Nome"});
            table1.AddRow(new string[] {
                        "1",
                        "Terminal A"});
            table1.AddRow(new string[] {
                        "2",
                        "Estação B"});
            table1.AddRow(new string[] {
                        "3",
                        "Terminal C"});
#line 8
    await testRunner.GivenAsync("a rota a ser percorrida", ((string)(null)), table1, "Dado ");
#line hidden
#line 13
    await testRunner.AndAsync("a viagem com ID 1 e 50 assentos máximos", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reservar uma passagem válida para um assento disponível")]
        [Xunit.TraitAttribute("FeatureTitle", "Reserva de Passagem")]
        [Xunit.TraitAttribute("Description", "Reservar uma passagem válida para um assento disponível")]
        public async System.Threading.Tasks.Task ReservarUmaPassagemValidaParaUmAssentoDisponivel()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Reservar uma passagem válida para um assento disponível", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 16
    await testRunner.AndAsync("o assento 5 está disponível do departamento \"Terminal A\" ao \"Terminal C\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 17
    await testRunner.WhenAsync("eu reservar uma passagem para o assento 5 do departamento \"Terminal A\" ao \"Termin" +
                        "al C\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 18
    await testRunner.ThenAsync("a passagem deverá ser adicionada com sucesso", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
#line 19
    await testRunner.AndAsync("o assento deverá ser marcado como ocupado do departamento \"Terminal A\" ao \"Termin" +
                        "al C\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Falha ao reservar um assento já ocupado")]
        [Xunit.TraitAttribute("FeatureTitle", "Reserva de Passagem")]
        [Xunit.TraitAttribute("Description", "Falha ao reservar um assento já ocupado")]
        public async System.Threading.Tasks.Task FalhaAoReservarUmAssentoJaOcupado()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Falha ao reservar um assento já ocupado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 22
    await testRunner.AndAsync("o assento 5 já está reservado do departamento \"Terminal A\" ao \"Estação B\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 23
    await testRunner.WhenAsync("eu tento reservar uma passagem para o assento 5 do departamento \"Terminal A\" ao \"" +
                        "Terminal C\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 24
    await testRunner.ThenAsync("sistema deve rejeitar a reserva com \"O assento já está ocupado para a rota do tic" +
                        "ket.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Falha ao reservar com departamento inválido")]
        [Xunit.TraitAttribute("FeatureTitle", "Reserva de Passagem")]
        [Xunit.TraitAttribute("Description", "Falha ao reservar com departamento inválido")]
        public async System.Threading.Tasks.Task FalhaAoReservarComDepartamentoInvalido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Falha ao reservar com departamento inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 27
    await testRunner.WhenAsync("eu tento reservar uma passagem para o assento 5 do departamento \"Terminal D\" ao \"" +
                        "Terminal C\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 28
    await testRunner.ThenAsync("sistema deve rejeitar a reserva com \"Departamento -1 não encontrado na rota.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Falha ao reservar quando a viagem está lotada")]
        [Xunit.TraitAttribute("FeatureTitle", "Reserva de Passagem")]
        [Xunit.TraitAttribute("Description", "Falha ao reservar quando a viagem está lotada")]
        public async System.Threading.Tasks.Task FalhaAoReservarQuandoAViagemEstaLotada()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Falha ao reservar quando a viagem está lotada", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
#line 31
    await testRunner.AndAsync("os assentos já estão reservado do departamento \"Terminal A\" ao \"Terminal C\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
#line 32
    await testRunner.WhenAsync("eu tento reservar uma passagem para o assento 2 do departamento \"Terminal A\" ao \"" +
                        "Terminal C\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 33
    await testRunner.ThenAsync("sistema deve rejeitar a reserva com \"O assento já está ocupado para a rota do tic" +
                        "ket.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Então ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ReservaDePassagemFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ReservaDePassagemFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
